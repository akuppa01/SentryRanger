
OPTIMIZATION IDEAS:
- store the most recent sentry command for a policy as an instance var in the
  policy class; When you encounter the same policy name again, that compare both
  the string's list form and find length or content differences.
- track which roles have been assigned to what groups using dict




next steps (July 13 5:54pm)
    - maybe in __main__
    - loop through resources dict
      -   loop through each of the resource's labels
        -    if resourceStr's set() is empty: 
        -       then move on (continue)
        -    else:
        -       loop through policy set:
        -           collect all the unique groups and permissions and store in the ResourceStr class
        -           create Resource's json and put in TempFiles
        -           deploy json to Ranger

  #ideas
  # - maybe create a ResourceStr class with string resourceStr

  #notes
  # - if Ranger is empty when we run my script, we would not need UPDATE_COMMAND, CREATE_COMMAND would be enough
  # - initialize default values only if they've been mentioned
    - add roles to policy labels and description
    - can add a role to two diff resources (policies)



Brainstorming:

grant role adi to group g1;
grant role nitish to group g2;
GRANT select ON TABLE d1.t1 TO ROLE adi;
GRANT ALL ON TABLE d1.t1 TO ROLE nitish;
grant role adi to group g3;
GRANT select ON TABLE d2.t2 TO ROLE adi;
/////
#Roles
adi => groups = {g1, g3}
nitish => groups = {g2}

////
#resources
d1.t1 => {'adi'   : select}
         {'nitish': all }
d2.t2 => {'adi'   : select}
      


policy name = "d1.t1"
  resources = {db = d1, tb = t1}
  policy labels = {"roleB","roleA"}
  permissions = {"All", "select"}
  groups = {"g1", "g2}


grant role adi to group g1;
grant role adi to group g2;

GRANT SELECT ON TABLE d1.t1 TO ROLE adi;
GRANT ALL ON TABLE d2.t2 TO ROLE adi;




policy name = "d1.t1"
  resources = {db = d1, tb = t1}
  description = ""
  permissions = ""
  groups = ""















   adi_all --> group1 d1.t1
adi  ---> group1
   adi_select  --> group1 d2.t2

adi to group group1


sentry
group1--> adi--> s(t1)+a(t2)


grant role nitish to group n1;

+++++++++++++++++++++++++++++++++++++++++++++++
create table test1(id int,name string);
create table test2(id int,name string);

create role r1;
create role r2;

GRANT SELECT (id) ON TABLE test1 TO ROLE r1;
GRANT SELECT (id) ON TABLE test2 TO ROLE r1;
grant select(name) on table test1 to ROLE r1;


grant role r1 to group g1;

grant role r1 to group g2;



grant select



GRANT select ON TABLE d1.t1 TO ROLE adi;
GRANT ALL ON TABLE d1.t1 TO ROLE adi;



Latest TODO:
 - change up second if statement that handles role assigning to groups
 - add code to main method
 - rewrite the json creation and ranger updation methods


TODO Friday:
  - //fix the url case

  - //for server cases throw warning and skip past
  - //ranger update function

  - //fix argPermission error
  - //fix the multiple same permissions in json error


  CURL commands:

  d1.t1.*
curl -ivk  -u 'admin:OracleTeamUSA!123' -X POST -H "Content-Type: application/json" -d @"d1.*.*".json https://129.80.66.56:6182/service/public/v2/api/policy/




//Questions:
- how to display resourceStr (policy name) for URI case (should I still do [0:3]??)
- what if the short version of resourceStr is not unique 
    d1.adi.india 
      and                   both => d1.adi.ind-1, d1.adi.ind-2
    d1.adi.independent 

-----> leave it OG, no trimming


Tasks:
- //add insert case


service/public/v2/api/service

curl -ivk  -u 'admin:OracleTeamUSA!123' -H "Content-Type: application/json" -X GET "https://129.80.66.56:6182/service/public/v2/api/service/"



TODO Jul 28:
- //implement arg parse to read stuff from terminal
    - //collect Ranger_admin_host public ip ('129.80.66.56'; everything before the colon) 
    - //not needed //collect cluster name and assign to serviceName = clusterName + "_hive"
    - //collect username and password(keep pass invisible) for ranger admin
    - //collect input file and assign to internal param
    - //maybe provide -h for help with basic help info

- //add the insert permission functionality (convert to update in ranger side)
- //add a logger file (new one for every run)
- //maybe make idempotent


Questions:
- //design decisions about argparse, (should we collect info within command or subsequently)
    python Sentry2Ranger.py 129.80.66.56 "InputFiles/scaj-INPUT-FILE.txt"
        or
    --> python Sentry2Ranger.py --input gg.txt 
  
  //## then collect public ip & input file path later
  ---> provide optional input flag, otherwise go with the sentry side func

- //does user need to provide input file at all, maybe give an option?
- //do we need to check if the entered user and pass work before we continue with program? how to check?


---> add a flag for input file and provide path

## Example terminal:

> python Sentry2Ranger.py
>     Enter the public ip of Ranger Admin Host : 
      You need to login to Ranger Admin!
>     Username : 
>     Passwork : 
      Great, you are logged in! || Sorry, wrong login information. Please try again (loop x3) || timeout, unable to load page

  


150.136.204.120:6182
admin
OracleTeamUSA!123


Questions:
- 129.80.66.56 => ranger admin public ip, then what is => 6182 variable name
- how to handle case where host is not loading
- what to do if user provides filepath via -input flag but its wrong, do I ask again, how many times, should i switch to default input, or stop program


curl -ivk  -u 'admin:OracleTeamUSA!123' -H "Content-Type: application/json" -X GET "https://129.80.66.56:6182/service/public/v2/api/service/?serviceType=hive"
/?serviceType=hive



TODO:

- //use urllib, requests, or subprocess instead of os module
- 

- //use try catch for wrong IP timeout

- //clear inputfiles and have one file called sampleInput (make that the default)
- //create a new log file everytime u run program
- //add --d or delete flag which would clear policies from ranger